name: CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Nix cache
      uses: cachix/cachix-action@v12
      with:
        name: nix-community
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}

    - name: Check, lint and test
      run: |
        nix develop --command cargo fmt --check
        nix develop --command cargo clippy -- -D warnings
        nix develop --command cargo test --verbose



  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Nix cache
      uses: cachix/cachix-action@v12
      with:
        name: nix-community
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}

    - name: Run cargo audit
      run: nix develop --command cargo audit



  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, audit]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Nix cache
      uses: cachix/cachix-action@v12
      with:
        name: nix-community
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}

    - name: Build binaries
      run: |
        mkdir -p release
        nix build .#sentinel --print-build-logs
        cp result/bin/sentinel release/
        nix build .#reporter --print-build-logs  
        cp result/bin/reporter release/

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        cat > release_notes.md << EOF
        ## 🚀 SwarmReport ${VERSION}
        
        **Real-time system monitoring for distributed environments**
        
        ### 📦 Binaries
        - \`sentinel\`: Central monitoring server with TUI and web dashboard
        - \`reporter\`: Lightweight client system monitor
        
        ### 🔧 Quick Start
        \`\`\`bash
        # Download binaries
        wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/sentinel
        wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/reporter
        
        # Make executable
        chmod +x sentinel reporter
        
        # Start sentinel server (opens TUI + web dashboard on :6969)
        ./sentinel
        
        # Run reporter on client machines
        ./reporter
        \`\`\`
        
        ### 🌐 Network Configuration
        \`\`\`bash
        # For remote sentinel server
        export SWARM_SENTINEL_ADDR="http://your-sentinel:50051"
        ./reporter
        \`\`\`

        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release/sentinel
          release/reporter
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        token: ${{ secrets.GITHUB_TOKEN }}




